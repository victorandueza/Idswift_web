"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.markdownDocsOfPrompts = exports.availablePrompts = void 0;
const core_1 = require("./core");
const dataconnect_1 = require("./dataconnect");
const crashlytics_1 = require("./crashlytics");
const prompts = {
    core: core_1.corePrompts,
    firestore: [],
    storage: [],
    dataconnect: dataconnect_1.dataconnectPrompts,
    auth: [],
    messaging: [],
    functions: [],
    remoteconfig: [],
    crashlytics: crashlytics_1.crashlyticsPrompts,
    apphosting: [],
    database: [],
};
function namespacePrompts(promptsToNamespace, feature) {
    return promptsToNamespace.map((p) => {
        const newPrompt = Object.assign({}, p);
        newPrompt.mcp = Object.assign({}, p.mcp);
        if (newPrompt.mcp.omitPrefix) {
        }
        else if (feature === "core") {
            newPrompt.mcp.name = `firebase:${p.mcp.name}`;
        }
        else {
            newPrompt.mcp.name = `${feature}:${p.mcp.name}`;
        }
        newPrompt.mcp._meta = Object.assign(Object.assign({}, p.mcp._meta), { feature });
        return newPrompt;
    });
}
function availablePrompts(activeFeatures) {
    const allPrompts = [];
    if (!(activeFeatures === null || activeFeatures === void 0 ? void 0 : activeFeatures.length)) {
        activeFeatures = Object.keys(prompts);
    }
    if (!activeFeatures.includes("core")) {
        activeFeatures = ["core", ...activeFeatures];
    }
    for (const feature of activeFeatures) {
        allPrompts.push(...namespacePrompts(prompts[feature], feature));
    }
    return allPrompts;
}
exports.availablePrompts = availablePrompts;
function markdownDocsOfPrompts() {
    var _a, _b;
    const allPrompts = availablePrompts();
    let doc = `
| Prompt Name | Feature Group | Description |
| ----------- | ------------- | ----------- |`;
    for (const prompt of allPrompts) {
        const feature = ((_a = prompt.mcp._meta) === null || _a === void 0 ? void 0 : _a.feature) || "";
        let description = prompt.mcp.description || "";
        if ((_b = prompt.mcp.arguments) === null || _b === void 0 ? void 0 : _b.length) {
            const argsList = prompt.mcp.arguments.map((arg) => ` <br>&lt;${arg.name}&gt;${arg.required ? "" : " (optional)"}: ${arg.description || ""}`);
            description += ` <br><br>Arguments:${argsList.join("")}`;
        }
        description = description.replaceAll("\n", "<br>");
        doc += `
| ${prompt.mcp.name} | ${feature} | ${description} |`;
    }
    return doc;
}
exports.markdownDocsOfPrompts = markdownDocsOfPrompts;
